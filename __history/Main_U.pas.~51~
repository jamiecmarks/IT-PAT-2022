unit Main_U;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Splash_U, ExtCtrls, shellapi, Menus, Buttons, dbAdmin_u,
  pngimage;

type
  TfrmMain = class(TForm)
    pnlIntro: TPanel;
    btnLearner: TButton;
    btnTeacher: TButton;
    btnAdmin: TButton;
    menMain: TMainMenu;
    OurStory1: TMenuItem;
    Resourcecentre1: TMenuItem;
    Help1: TMenuItem;
    Ourgithub1: TMenuItem;
    edtUsername: TEdit;
    edtPassword: TEdit;
    pnlMain: TPanel;
    lblUsername: TLabel;
    lblPassword: TLabel;
    btnReg: TButton;
    btnLogin: TButton;
    btnCancel: TBitBtn;
    rgpGender: TRadioGroup;
    edtName: TEdit;
    edtSurname: TEdit;
    edtTPassword: TEdit;
    btnTLogin: TButton;
    edtTSurname: TEdit;
    edtTUsername: TEdit;
    edtTName: TEdit;
    lblTUsername: TLabel;
    lblTPassword: TLabel;
    btnTReg: TButton;
    btnTCancel: TBitBtn;
    imgEyeOpen: TImage;
    imgEyeClosed: TImage;
    imgTEyeOpen: TImage;
    imgTEyeClosed: TImage;
    procedure FormShow(Sender: TObject);
    procedure btnLearnerMouseEnter(Sender: TObject);
    procedure btnLearnerMouseLeave(Sender: TObject);
    procedure btnTeacherMouseEnter(Sender: TObject);
    procedure btnTeacherMouseLeave(Sender: TObject);
    procedure btnAdminMouseEnter(Sender: TObject);
    procedure btnAdminMouseLeave(Sender: TObject);
    procedure OurStory1Click(Sender: TObject);
    procedure Ourgithub1Click(Sender: TObject);
    procedure btnLearnerClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    procedure btnRegClick(Sender: TObject);
    procedure btnTLoginClick(Sender: TObject);
    procedure btnTCancelClick(Sender: TObject);
    procedure btnTeacherClick(Sender: TObject);
    procedure btnAdminClick(Sender: TObject);
    procedure imgEyeOpenClick(Sender: TObject);
    procedure imgEyeClosedClick(Sender: TObject);
    procedure HideAllTeacher(bAffect: boolean);
    function Decrypt(sKey: string; EncryptedText: string): string;
    function KeyCreator(sKeyword: string): string;
    function Encrypt(sKey: string; PlainText: string): string;
  private
    procedure HideAllLearner(bAffect: boolean);
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmMain: TfrmMain;
  sKey: string;

implementation

{$R *.dfm}

procedure TfrmMain.btnCancelClick(Sender: TObject);
begin
  // going back to the main home page
  HideAllLearner(True);
end;

procedure TfrmMain.btnAdminClick(Sender: TObject);
var
  sEnteredPass: string;
  myFile: textfile;
  sEncryptedPass: string;
begin
  btnLearner.Show;
  btnTeacher.Show;

  assignfile(myFile, 'EncryptedAdminPassword.txt');
  reset(myFile);
  while not eof(myFile) do
  begin
    readln(myFile, sEncryptedPass);
  end;
  closefile(myFile);
  showmessage(sEncryptedPass);
  showmessage(Decrypt(KeyCreator(sKey), sEncryptedPass));
  sEnteredPass := inputbox('Enter the admin password', '', 'technotutors');
  if sEnteredPass = Decrypt(KeyCreator(sKey), sEncryptedPass) then
  begin
    showmessage('Welcome Admin');
    frmDBAdmin.Show;
  end
  else
  begin
    Dialogs.MessageDlg('The entered password is incorrect, please try again', mtInformation,
      [mbOk], 0, mbOk);
  end;

end;

procedure TfrmMain.btnAdminMouseEnter(Sender: TObject);
begin
  btnAdmin.font.Size := 12;
  pnlIntro.Color := clMoneyGreen;
  pnlMain.Color := clMoneyGreen;
end;

procedure TfrmMain.btnAdminMouseLeave(Sender: TObject);
begin
  btnAdmin.font.Size := 10;
  pnlIntro.Color := clSilver;
  pnlMain.Color := clSilver;
end;

procedure TfrmMain.btnLearnerClick(Sender: TObject);
begin
  // showing the appropriate components for login as a student
  HideAllLearner(False);

  btnTeacher.Show;
  btnAdmin.Show;

end;

procedure TfrmMain.btnLearnerMouseEnter(Sender: TObject);
begin
  btnLearner.font.Size := 12;
  pnlIntro.Color := clBlue;
  pnlMain.Color := clBlue;

end;

procedure TfrmMain.btnLearnerMouseLeave(Sender: TObject);
begin
  btnLearner.font.Size := 10;
  pnlIntro.Color := clSilver;
  pnlMain.Color := clSilver;

end;

procedure TfrmMain.btnRegClick(Sender: TObject);
begin
  // showing and hidint appropriate components for registering a new account
  btnLogin.Enabled := False;
  MessageDlg(
    'Please fill out the rest of your information and press the "register button" once you have done that', mtWarning, [mbOk], 0);
  edtName.Show;
  edtSurname.Show;
  rgpGender.Show;
end;

procedure TfrmMain.btnTCancelClick(Sender: TObject);
begin
  // remove the log in components
  HideAllTeacher(True);
end;

procedure TfrmMain.btnTeacherClick(Sender: TObject);
begin
  HideAllTeacher(False);

  btnLearner.Show;
  btnAdmin.Show;

end;

procedure TfrmMain.btnTeacherMouseEnter(Sender: TObject);
begin
  btnTeacher.font.Size := 12;
  pnlIntro.Color := clTeal;
  pnlMain.Color := clTeal;

end;

procedure TfrmMain.btnTeacherMouseLeave(Sender: TObject);
begin
  btnTeacher.font.Size := 10;
  pnlIntro.Color := clSilver;
  pnlMain.Color := clSilver;
end;

procedure TfrmMain.btnTLoginClick(Sender: TObject);
begin
  // showing and hidint appropriate components for registering a new account
  btnTLogin.Enabled := False;
  MessageDlg(
    'Please fill out the rest of your information and press the "register button" once you have done that', mtWarning, [mbOk], 0);
  edtTName.Show;
  edtTSurname.Show;
end;

function TfrmMain.Decrypt(sKey: string; EncryptedText: string): string;
var
  m, iIndex: integer;
  sOutput: string;
const
  sValid: string = 'abcdefghijklmnopqrstuvwxyz ';
begin
  // decrypting according to the key
  for m := 1 to length(EncryptedText) do
  begin
    iIndex := pos(EncryptedText[m], sKey);
    sOutput := sOutput + sValid[iIndex];
  end;
  result := sOutput;
end;

function TfrmMain.Encrypt(sKey, PlainText: string): string;
var
  m: integer;
  sOutput: string;
  iIndex: integer;
const
  sValid: string = 'abcdefghijklmnopqrstuvwxyz ';
begin
  // ciphering according to the key
  for m := 1 to length(PlainText) do
  begin
    iIndex := pos(PlainText[m], sValid);
    sOutput := sOutput + sKey[iIndex];
  end;
  result := sOutput;
end;

procedure TfrmMain.FormShow(Sender: TObject);
begin
  sKey := 'tech';
  frmsplash.showmodal;
  HideAllLearner(True);
  HideAllTeacher(True);

end;

procedure TfrmMain.HideAllLearner(bAffect: boolean);
begin
  if not bAffect then
  begin
    btnLearner.Hide;
    edtUsername.Show;
    edtPassword.Show;
    lblUsername.Visible := True;
    lblPassword.Visible := True;
    btnReg.Visible := True;
    btnLogin.Visible := True;
    btnCancel.Show;
    imgEyeOpen.Show;
  end
  else if bAffect then
  begin
    edtUsername.Visible := False;
    edtPassword.Visible := False;
    lblUsername.Visible := False;
    lblPassword.Visible := False;
    btnLearner.Show;
    btnReg.Visible := False;
    btnLogin.Visible := False;
    btnCancel.Hide;
    btnLogin.Enabled := True;
    rgpGender.Visible := False;
    edtName.Hide;
    edtSurname.Hide;
    imgEyeOpen.Hide;
    imgEyeClosed.Hide;
  end;
end;

procedure TfrmMain.HideAllTeacher(bAffect: boolean);
begin
  if bAffect then
  begin
    btnTeacher.Show;
    edtTPassword.Hide;
    edtTUsername.Hide;
    lblTUsername.Visible := False;
    lblTPassword.Visible := False;
    btnTReg.Visible := False;
    btnTLogin.Visible := False;
    btnTCancel.Hide;
    edtTName.Hide;
    edtTSurname.Hide;
    imgTEyeOpen.Hide;
    imgTEyeClosed.Hide;
  end;
  if not bAffect then
  begin
    btnTeacher.Hide;
    edtTUsername.Show;
    edtTPassword.Show;
    lblTUsername.Visible := True;
    lblTPassword.Visible := True;
    btnTReg.Visible := True;
    btnTLogin.Visible := True;
    btnTCancel.Show;
    imgTEyeOpen.Show;
  end;

end;

procedure TfrmMain.imgEyeClosedClick(Sender: TObject);
begin
  edtPassword.PasswordChar := '*';
  imgEyeClosed.Hide;
  imgEyeOpen.Show;
  edtTPassword.PasswordChar := '*';
  imgTEyeClosed.Hide;
  imgTEyeOpen.Show;
end;

procedure TfrmMain.imgEyeOpenClick(Sender: TObject);
begin
  edtPassword.PasswordChar := #0;
  imgEyeOpen.Hide;
  imgEyeClosed.Show;
  edtTPassword.PasswordChar := #0;
  imgTEyeOpen.Hide;
  imgTEyeClosed.Show;
end;

function TfrmMain.KeyCreator(sKeyword: string): string;
var
  K, iKeyIndex: integer;
  L: integer;
  sKey: string;
begin
  sKey := 'abcdefghijklmnopqrstuvwxyz ';
  Delete(sKey, pos(sKeyword[1], sKey), 1);
  // creating key
  for L := 1 to length(sKey) do
  begin
    for K := 1 to length(sKeyword) do
    begin
      if sKey[L] = sKeyword[K] then // if c, a or t = abcdefghijklmnopqrstuvwxyz
      begin
        iKeyIndex := pos(sKeyword[K], sKey); // Keyindex = position c,a or t in abcdefghijklmnopqrstuvwxyz
        Delete(sKey, iKeyIndex, 1);
      end;
    end;
  end;
  sKey := sKeyword + sKey;
  result := sKey;
end;

procedure TfrmMain.Ourgithub1Click(Sender: TObject);
begin
  ShellExecute(0, nil, PChar('https://github.com/jamiecmarks/IT-PAT-2022'),
    nil, nil, SW_SHOWNORMAL);
end;

procedure TfrmMain.OurStory1Click(Sender: TObject);
begin
  ShellExecute(0, nil, PChar('ourstory.html'), nil, nil, SW_SHOWNORMAL);
end;

end.
