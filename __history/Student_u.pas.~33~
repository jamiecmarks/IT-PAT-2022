unit Student_u;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, Grids, DBGrids, DBConnection_u, pngimage,
  ExtCtrls, Menus, ComCtrls, DateUtils, shellapi;

type
  TfrmLearner = class(TForm)
    imgExit: TImage;
    lblExit: TLabel;
    pgcntrlLearner: TPageControl;
    TabSheet2: TTabSheet;
    mainmenLearner: TMainMenu;
    Mainmenu1: TMenuItem;
    Learnerresourcecenter1: TMenuItem;
    redStudent: TRichEdit;
    TabSheet1: TTabSheet;
    btnAll: TButton;
    btnUpcoming: TButton;
    btnToday: TButton;
    Button1: TButton;
    dbgridSessions: TDBGrid;
    imgSave: TImage;
    rdgpPassword: TRadioGroup;
    lblPreviousPass: TLabel;
    lblNew: TLabel;
    edtPrevious: TEdit;
    edtNewPass: TEdit;
    btnSubmit: TButton;
    Userinfo1: TMenuItem;
    RadioGroup1: TRadioGroup;
    lblNewUsername: TLabel;
    btnUsernameSubmit: TButton;
    edtNewUsername: TEdit;
    procedure FormShow(Sender: TObject);
    procedure imgExitClick(Sender: TObject);
    procedure Mainmenu1Click(Sender: TObject);
    procedure btnAllClick(Sender: TObject);
    procedure FormatRichedit;
    procedure btnUpcomingClick(Sender: TObject);
    procedure Learnerresourcecenter1Click(Sender: TObject);
    procedure btnTodayClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure btnSubmitClick(Sender: TObject);
    procedure Userinfo1Click(Sender: TObject);
    procedure btnUsernameSubmitClick(Sender: TObject);
    procedure imgSaveClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    procedure SessionSql(sSql: string);
  end;

var
  frmLearner: TfrmLearner;
  conTechno: TConnection;
  arrSubjects: array [1 .. 13] of string;
  sOriginalUsername: string;
  sNewPass: string;
  bPassChanged: boolean = False;

implementation

uses Main_u;
{$R *.dfm}

procedure TfrmLearner.btnAllClick(Sender: TObject);
var
  iSubject: integer;
begin
  FormatRichedit;
  redStudent.Lines.Add(#9 + #9 + 'ALL SESSIONS:');
  redStudent.Lines.Add('|Tutor Username|' + #9 + '|Session Date|' + #9 +
      '|Subjectname|' + #9 + '|Meeting Link|' + #9 + '|Session Time|');
  redStudent.Lines.Add(
    '----------------------------------------------------------------------------------------------------------------------------');

  conTechno.dbconnection;
  tblSessions.First;
  while not tblSessions.Eof do
  begin
    if (tblSessions['StudentUsername'] = objStudent.GetUsername) then
    // all session records relation to a certain student
    begin
      iSubject := tblSessions['SubjectID'];
      if tblSessions['Meetinglink'] = null then
        redStudent.Lines.Add(tblSessions['TutorUsername'] + #9 + datetostr
            (tblSessions['SessionDate']) + #9 + arrSubjects[iSubject]
            + #9 + 'No link provided' + #9 + TimeToStr
            (tblSessions['SessionTime']))
      else
        redStudent.Lines.Add(tblSessions['TutorUsername'] + #9 + datetostr
            (tblSessions['SessionDate']) + #9 + arrSubjects[iSubject]
            + #9 + tblSessions['Meetinglink'] + #9 + TimeToStr
            (tblSessions['SessionTime']));
    end;
    tblSessions.Next;

  end;
end;

procedure TfrmLearner.btnSubmitClick(Sender: TObject);
begin
  if objStudent.ComparePass(edtPrevious.Text) then
  begin
    if not frmMain.IsValidPassword(edtNewPass.Text) then
      exit;
    objStudent.SetPassword(edtNewPass.Text);
    bPassChanged := True;
    messagedlg('Your password has been succesfully updated!', mtinformation,
      [mbok], 0);
    sNewPass := edtNewPass.Text;
  end
  else
    messagedlg('Your previous password is incorrect', mtinformation, [mbok], 0);

end;

procedure TfrmLearner.btnTodayClick(Sender: TObject);
var
  iSubject: integer;
begin
  FormatRichedit;
  redStudent.Lines.Add(#9 + #9 + 'TODAY''S SESSIONS:');
  redStudent.Lines.Add('|Tutor Username|' + #9 + '|Session Date|' + #9 +
      '|Subjectname|' + #9 + '|Meeting Link|' + #9 + '|Session Time|');
  redStudent.Lines.Add(
    '----------------------------------------------------------------------------------------------------------------------------');

  conTechno.dbconnection;
  tblSessions.First;
  while not tblSessions.Eof do
  begin
    if (tblSessions['StudentUsername'] = objStudent.GetUsername) AND
      (tblSessions['SessionDate'] = Today) then
    // all session records relation to a certain student
    begin
      iSubject := tblSessions['SubjectID'];
      if tblSessions['Meetinglink'] = null then
        redStudent.Lines.Add(tblSessions['TutorUsername'] + #9 + datetostr
            (tblSessions['SessionDate']) + #9 + arrSubjects[iSubject]
            + #9 + 'No link provided' + #9 + TimeToStr
            (tblSessions['SessionTime']))
      else
        redStudent.Lines.Add(tblSessions['TutorUsername'] + #9 + datetostr
            (tblSessions['SessionDate']) + #9 + arrSubjects[iSubject]
            + #9 + tblSessions['Meetinglink'] + #9 + TimeToStr
            (tblSessions['SessionTime']));
    end;
    tblSessions.Next;
  end;
end;

procedure TfrmLearner.btnUpcomingClick(Sender: TObject);
var
  iSubject: integer;
begin
  FormatRichedit;
  redStudent.Lines.Add(#9 + #9 + 'UPCOMING SESSIONS:');
  redStudent.Lines.Add('|Tutor Username|' + #9 + '|Session Date|' + #9 +
      '|Subjectname|' + #9 + '|Meeting Link|' + #9 + '|Session Time|');
  redStudent.Lines.Add(
    '----------------------------------------------------------------------------------------------------------------------------');

  conTechno.dbconnection;
  tblSessions.First;
  while not tblSessions.Eof do
  begin
    if (tblSessions['StudentUsername'] = objStudent.GetUsername) AND
      (tblSessions['SessionDate'] > Today) then
    // all session records relation to a certain student
    begin
      iSubject := tblSessions['SubjectID'];
      if tblSessions['Meetinglink'] = null then
        redStudent.Lines.Add(tblSessions['TutorUsername'] + #9 + datetostr
            (tblSessions['SessionDate']) + #9 + arrSubjects[iSubject]
            + #9 + 'No link provided' + #9 + TimeToStr
            (tblSessions['SessionTime']))
      else
        redStudent.Lines.Add(tblSessions['TutorUsername'] + #9 + datetostr
            (tblSessions['SessionDate']) + #9 + arrSubjects[iSubject]
            + #9 + tblSessions['Meetinglink'] + #9 + TimeToStr
            (tblSessions['SessionTime']));
    end;
    tblSessions.Next;
  end;
end;

procedure TfrmLearner.btnUsernameSubmitClick(Sender: TObject);
begin
  if frmMain.IsUniqueUsername(tblStudents, edtNewUsername.Text) then
  begin
    objStudent.SetUsername(edtNewPass.Text);
    messagedlg('Your username has been succesfully updated!', mtinformation,
      [mbok], 0);
  end
  else
    messagedlg('Your'' username is not unique, please choose another one',
      mtinformation, [mbok], 0);

end;

procedure TfrmLearner.Button1Click(Sender: TObject);
var
  iSubject, iHours: integer;
begin
  try
    iHours := strtoint(inputbox(
        'Enter the amount of hours ahead from now you would like to see sessions for'
          , 'Hours', '1'));
  Except
    begin
      messagedlg('Please insert a number', mtError, [mbok], 0);
      exit;
    end;
  end;
  FormatRichedit;
  redStudent.Lines.Add(#9 + #9 + 'SESSIONS WITHIN THE NEXT ' + inttostr(iHours)
      + ' HOURS(S):');
  redStudent.Lines.Add('|Tutor Username|' + #9 + '|Session Date|' + #9 +
      '|Subjectname|' + #9 + '|Meeting Link|' + #9 + '|Session Time|');
  redStudent.Lines.Add(
    '----------------------------------------------------------------------------------------------------------------------------');

  conTechno.dbconnection;
  tblSessions.First;
  while not tblSessions.Eof do
  begin
    if (tblSessions['StudentUsername'] = objStudent.GetUsername) AND
      ((tblSessions['SessionDate'] = Today) AND
        (TimeToStr(tblSessions['SessionTime']) > TimeToStr(now))) AND
      (TimeToStr(tblSessions['SessionTime']) < TimeToStr(IncHour(now, iHours))
      ) then
    // all session records relation to a certain student
    begin
      iSubject := tblSessions['SubjectID'];
      if tblSessions['Meetinglink'] = null then
        redStudent.Lines.Add(tblSessions['TutorUsername'] + #9 + datetostr
            (tblSessions['SessionDate']) + #9 + arrSubjects[iSubject]
            + #9 + 'No link provided' + #9 + TimeToStr
            (tblSessions['SessionTime']))
      else
        redStudent.Lines.Add(tblSessions['TutorUsername'] + #9 + datetostr
            (tblSessions['SessionDate']) + #9 + arrSubjects[iSubject]
            + #9 + tblSessions['Meetinglink'] + #9 + TimeToStr
            (tblSessions['SessionTime']));
    end;
    tblSessions.Next;
  end;
end;

procedure TfrmLearner.FormatRichedit;
begin
  redStudent.Clear;
  redStudent.Paragraph.TabCount := 5; // formating for richedit
  redStudent.Paragraph.Tab[0] := 80;
  redStudent.Paragraph.Tab[1] := 160;
  redStudent.Paragraph.Tab[2] := 240;
  redStudent.Paragraph.Tab[3] := 320;
  redStudent.Paragraph.Tab[4] := 330;
end;

procedure TfrmLearner.FormShow(Sender: TObject);
var
  myFile: textfile;
  sLine: string;
  iCount: integer;
begin
  sOriginalUsername := objStudent.GetUsername;
  pgcntrlLearner.TabIndex := 1;
  conTechno.dbconnection;
  conTechno.ConnectSessions(dbgridSessions);
  SessionSql(
    'SELECT TutorUsername AS [Tutor Username], Sessiondate as [Date of sesion], meetinglink AS [Link used] FROM tblSessions where StudentUsername = ' + quotedstr(objStudent.GetUsername));

  // loading the arrsubjects array according to subjects.txt
  iCount := 1;
  AssignFile(myFile, 'Subjects.txt');
  reset(myFile);
  while not Eof(myFile) do
  begin
    readln(myFile, sLine);
    arrSubjects[iCount] := sLine;
    inc(iCount);
  end;
  closefile(myFile);
end;

procedure TfrmLearner.imgExitClick(Sender: TObject);
begin
  if Dialogs.messagedlg(
    'Are you sure you want to exit, all unsaved changes will be lost?',
    mtConfirmation, [mbYes, mbNo], 0, mbYes) = mrYes then
  begin
    Dialogs.messagedlg(
      'Exiting Technotutors scheduling software, thank you for using us!',
      mtinformation, [mbok], 0, mbok);
    application.Terminate;
  end;
end;

procedure TfrmLearner.imgSaveClick(Sender: TObject);
begin
  tblStudents.First;
  while not tblStudents.Eof do
  begin
    if tblStudents['Username'] = sOriginalUsername then
    begin
      tblStudents.Edit;
      tblStudents['Username'] := objStudent.GetUsername;
      if bPassChanged then
        tblStudents['Password'] := sNewPass;
      tblStudents.Post;
      messagedlg('Changes have been permanantly saved', mtinformation, [mbok],
        0);

    end;
    tblStudents.Next;
  end;

end;

procedure TfrmLearner.Learnerresourcecenter1Click(Sender: TObject);
begin
  ShellExecute(0, nil, PChar('resource_centre.html'), nil, nil, SW_SHOWNORMAL);
  // opens resource centre for learners
end;

procedure TfrmLearner.Mainmenu1Click(Sender: TObject);
begin
  objStudent.Free;
  frmLearner.close;
  frmMain.Show;

end;

procedure TfrmLearner.SessionSql(sSql: string);
begin
  qrySessions.close;
  qrySessions.SQL.Clear;
  qrySessions.SQL.Add(sSql);

  if uppercase(copy(sSql, 1, 6)) = 'SELECT' then
  // checking for select statement
  begin
    qrySessions.Open; // running select sql
    dsSessions.DataSet := qrySessions;
  end
  else
  begin
    qrySessions.ExecSQL;
    // running anything that isnt a select statemnt
  end;
end;

procedure TfrmLearner.Userinfo1Click(Sender: TObject);
begin
  redStudent.Lines.Add(objStudent.ToString); // outputs info about the user
end;

end.
