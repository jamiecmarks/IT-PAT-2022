unit Tutor_u;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Menus, StdCtrls, ComCtrls, Grids, DBGrids, ExtCtrls, pngimage,
  DBConnection_u;

type
  TfrmTutor = class(TForm)
    imgExit: TImage;
    lblExit: TLabel;
    pgcntrlLearner: TPageControl;
    TabSheet2: TTabSheet;
    imgSave: TImage;
    lblPreviousPass: TLabel;
    lblNew: TLabel;
    lblNewUsername: TLabel;
    rdgpPassword: TRadioGroup;
    edtPrevious: TEdit;
    edtNewPass: TEdit;
    btnSubmit: TButton;
    RadioGroup1: TRadioGroup;
    btnUsernameSubmit: TButton;
    edtNewUsername: TEdit;
    TabSheet1: TTabSheet;
    btnAll: TButton;
    btnUpcoming: TButton;
    btnToday: TButton;
    Button1: TButton;
    dbgridSessions: TDBGrid;
    redTutor: TRichEdit;
    mainmenLearner: TMainMenu;
    Mainmenu1: TMenuItem;
    Learnerresourcecenter1: TMenuItem;
    Userinfo1: TMenuItem;
    procedure FormShow(Sender: TObject);
    procedure btnAllClick(Sender: TObject);
    procedure imgExitClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    procedure SessionSql(sSql: string);
  end;

var
  frmTutor: TfrmTutor;
  sOriginalUsername: string;
  arrSubjects: array [1 .. 13] of string;

implementation

uses Main_u, student_u;
{$R *.dfm}

procedure TfrmTutor.btnAllClick(Sender: TObject);
var
  iSubject: integer;
begin
  frmLearner.FormatRichedit(redTutor);; // formatting richedit using procedure
  redTutor.Lines.Add(#9 + #9 + 'ALL SESSIONS:'); // title
  redTutor.Lines.Add('|Student Username|' + #9 + '|Session Date|' + #9 +
      '|Subjectname|' + #9 + '|Meeting Link|' + #9 + '|Session Time|');
  // headings
  redTutor.Lines.Add( // line to seperate titles from info
    '----------------------------------------------------------------------------------------------------------------------------');

  conTechno.dbconnection; // database connection
  tblSessions.First; // start at begginging of textfile
  while not tblSessions.Eof do
  begin
    if (tblSessions['TutorUsername'] = objTutor.GetUsername) then
    // all session records relation to a certain student
    begin
      iSubject := tblSessions['SubjectID']; // extracting subject number to access subject name from array
      if tblSessions['Meetinglink'] = null then // if no link is provided, to prevent errors
        redTutor.Lines.Add(tblSessions['StudentUsername'] + #9 + datetostr
            (tblSessions['SessionDate']) + #9 + arrSubjects[iSubject]
            + #9 + 'No link provided' + #9 + TimeToStr
            (tblSessions['SessionTime']))
      else
        redTutor.Lines.Add(tblSessions['StudentUsername'] + #9 + datetostr
          // if a meeting link is provided
            (tblSessions['SessionDate']) + #9 + arrSubjects[iSubject]
            + #9 + tblSessions['Meetinglink'] + #9 + TimeToStr
            (tblSessions['SessionTime']));
    end;
    tblSessions.Next; //table sessions next record

  end;
end;

procedure TfrmTutor.FormShow(Sender: TObject);

var
  myFile: textfile;
  sLine: string;
  iCount: integer;
begin
  sOriginalUsername := objTutor.GetUsername; // storing orignal surname incase it gets changed later
  pgcntrlLearner.TabIndex := 1; // setting page control default page
  conTechno.dbconnection; // database connection
  conTechno.ConnectSessions(dbgridSessions);
  SessionSql(
    'SELECT SessionID as [Session ID], StudentUsername AS [Student Username], Sessiondate as [Date of sesion], meetinglink AS [Link used] FROM tblSessions where TutorUsername = ' + quotedstr(objTutor.GetUsername));
  // shows all the database records relating to the teacher and no one else

  // loading the arrsubjects array according to subjects.txt
  iCount := 1;
  AssignFile(myFile, 'Subjects.txt');
  reset(myFile);
  while not Eof(myFile) do
  begin
    readln(myFile, sLine);
    arrSubjects[iCount] := sLine;
    inc(iCount);
  end;
  closefile(myFile); // close subject textfile
end;

procedure TfrmTutor.imgExitClick(Sender: TObject);
begin
  if Dialogs.messagedlg(
    'Are you sure you want to exit, all unsaved changes will be lost?',
    // checking with the user if they are sure that they want to exit
    mtConfirmation, [mbYes, mbNo], 0, mbYes) = mrYes then
  begin
    Dialogs.messagedlg(
      'Exiting Technotutors scheduling software, thank you for using us!',
      mtinformation, [mbok], 0, mbok);//exit message
    application.Terminate;
  end;
end;

procedure TfrmTutor.SessionSql(sSql: string);
begin
  qrySessions.close;
  qrySessions.SQL.Clear;
  qrySessions.SQL.Add(sSql);

  if uppercase(copy(sSql, 1, 6)) = 'SELECT' then
  // checking for select statement
  begin
    qrySessions.Open; // running select sql
    dsSessions.DataSet := qrySessions;
  end
  else
  begin
    qrySessions.ExecSQL;
    // running anything that isnt a select statemnt
  end;
end;

end.
